# –≠—Ç–æ—Ç –±–æ—Ç —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —Å–ø–∏—Å–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞ –ø–æ –∏–¥–µ–µ, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç).

import telebot
from telebot import types
import buttons
import database
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
from buttons import language_selection_buttons, main_menu, compare_lists_buttons, cancel_button

geolocator = Nominatim(user_agent="geo_locator", timeout=10)

bot = telebot.TeleBot('—Ç–æ–∫–µ–Ω')
users = {}

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç / –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    bot.send_message(user_id, 'üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Tilni tanlang:', reply_markup=language_selection_buttons())


@bot.callback_query_handler(func=lambda call: call.data in ['language_russian', 'language_uzbek'])
def handle_language_selection(call):
    user_id = call.from_user.id
    new_text = "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫" if call.data == 'language_russian' else "‚úÖ Siz o'zbek tilini tanladingiz"

    if call.message.text != new_text:
        bot.edit_message_text(new_text, call.message.chat.id, call.message.message_id, reply_markup=None)

    handle_registration_or_action(user_id)


# –ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫
@bot.callback_query_handler(func=lambda call: call.data == "change_language")
def change_language(call):
    user_id = call.from_user.id
    bot.send_message(user_id, 'üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Select a language:', reply_markup=language_selection_buttons())


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def handle_registration_or_action(user_id):
    try:
        is_registered = database.check_user(user_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if is_registered:
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=buttons.main_menu())
    else:
        bot.send_message(user_id, '–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:')
        bot.register_next_step_handler_by_chat_id(user_id, get_name)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏
def get_name(message):
    user_id = message.from_user.id
    user_name = message.text.strip()

    if not user_name:
        bot.send_message(user_id, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è')
        bot.register_next_step_handler(message, get_name)
        return

    users[user_id] = {'name': user_name}
    bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä', reply_markup=buttons.num_button())
    bot.register_next_step_handler(message, get_num)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
def get_num(message):
    user_id = message.from_user.id
    if message.contact and hasattr(message.contact, 'phone_number'):
        users[user_id]['phone_number'] = message.contact.phone_number
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é', reply_markup=buttons.loc_button())
        bot.register_next_step_handler(message, get_loc)
    else:
        bot.send_message(user_id, '‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.')
        bot.register_next_step_handler(message, get_num)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–∏
def get_loc(message):
    user_id = message.from_user.id
    if message.location:
        try:
            longitude, latitude = message.location.longitude, message.location.latitude
            location = geolocator.reverse((latitude, longitude), timeout=10)
            address = location.address if location else "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except GeocoderTimedOut:
            bot.send_message(user_id, '–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
            bot.register_next_step_handler(message, get_loc)
            return

        users[user_id]['location'] = address
        database.save_user(user_id, users[user_id]['name'], users[user_id]['phone_number'], address)
        bot.send_message(user_id, '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!', reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=buttons.main_menu())
    else:
        bot.send_message(user_id, 'üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.', reply_markup=buttons.loc_button())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤
@bot.callback_query_handler(func=lambda call: call.data == "compare_lists")
def handle_compare_lists(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    bot.send_message(user_id, "üìù –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):",
                     reply_markup=cancel_button())
    bot.register_next_step_handler_by_chat_id(user_id, process_first_list)


# –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
def parse_list_input(text):
    elements = []
    for line in text.split('\n'):
        elements.extend([item.strip().lower() for item in line.split(',')])
    return [item for item in elements if item]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
def process_first_list(message):
    user_id = message.from_user.id
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return go_to_main_menu(message)

    try:
        first_list = parse_list_input(message.text)
        if not first_list:
            raise ValueError("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")

        users.setdefault(user_id, {})['list1'] = first_list
        bot.send_message(user_id, "üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —Å–ø–∏—Å–æ–∫:",
                         reply_markup=cancel_button())
        bot.register_next_step_handler(message, process_second_list)
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:",
                         reply_markup=cancel_button())
        bot.register_next_step_handler(message, process_first_list)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞
def process_second_list(message):
    user_id = message.from_user.id
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return go_to_main_menu(message)

    try:
        second_list = parse_list_input(message.text)
        if not second_list:
            raise ValueError("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")

        users[user_id]['list2'] = second_list
        send_comparison_results(user_id)
    except ValueError:
        bot.send_message(user_id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:",
                         reply_markup=cancel_button())
        bot.register_next_step_handler(message, process_second_list)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
def send_comparison_results(user_id):
    list1 = {item.lower() for item in users[user_id]['list1']}
    list2 = {item.lower() for item in users[user_id]['list2']}

    common = list1 & list2
    only_in_first = list1 - list2
    only_in_second = list2 - list1

    message = "\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:\n"
    message += f"‚úÖ –û–±—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(common) if common else '–ù–µ—Ç'}\n"
    message += f"üîπ –¢–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–º —Å–ø–∏—Å–∫–µ: {', '.join(only_in_first) if only_in_first else '–ù–µ—Ç'}\n"
    message += f"üî∏ –¢–æ–ª—å–∫–æ –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ø–∏—Å–∫–µ: {', '.join(only_in_second) if only_in_second else '–ù–µ—Ç'}"

    bot.send_message(user_id, message, reply_markup=compare_lists_buttons())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
@bot.callback_query_handler(func=lambda call: call.data == "compare_again")
def repeat_comparison(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    bot.send_message(user_id, "üìù –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Å–ø–∏—Å–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):",
                     reply_markup=cancel_button())
    bot.register_next_step_handler_by_chat_id(user_id, process_first_list)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
@bot.callback_query_handler(func=lambda call: call.data == "main_menu")
def handle_main_menu(call):
    user_id = call.from_user.id
    bot.send_message(user_id, "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=buttons.main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def go_to_main_menu(message):
    bot.send_message(message.from_user.id, "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())



bot.infinity_polling()